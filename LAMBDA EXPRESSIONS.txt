Lambda Expressions in Java:

In Java, lambda expressions can only be used with functional interfaces (i.e interfaces having only one abstract method).
It is treated just like a function and we don't need to define the method again for providing the implementation. 
Here, we just write the implementation code. We can omit the data type of the parameters in a lambda expression.
We can consider lambda expressions as anonymous methods (methods without a name).

General Syntax:

(p1,p2) -> {
  //implementation	
};

p1,p2 - parameter/s name
-> - arrow-token
{}; - body (it is optional if the expression is of one line see example. Also, if there is enclosing parenthesis after braces then ; is also
optional)  


Example 0 (Basics of interfaces):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
 	
	//interfaces cannot be instantiated
	Single s = new Fatal();	
	
	s.print();	
 }
}

 interface Single{
	void print();
 }

//class implementing the interface 'Single'
class Fatal implements Single{
	public void print(){
		System.out.println("I'm single !");
	}
}


Example 1(Using anonymous classes):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
 
	Functional f = new Functional(){
		@Override
		public String say(String s){
			return s+" "+"Shaikh";
		}
	};
	
	out.println(f.say("Hammad"));
 }
}

 //functional interface having only one abstract method
 interface Functional{
 	String say(String s);
 }


Example 2(Lambda with No Parameter):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	//if we want to use curly braces	
	//Single s = () -> {out.println("I'm single !");};
	
	//we can omit the outer curly braces if it is a single line (expression) or
	//if the return type is void
	Single s = () -> out.println("I'm single !");
	s.print();
 }
}

 //functional interface having only one abstract method	
 interface Single{
	void print();
 }


Example 3(Lambda with Single Parameter - I):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	//'f' is the object of 'Functional' interface 	
	//we can omit parenthesis if there is only one parameter
	Functional f = s -> "Hammad"+ " " + s;
	out.println(f.say("Shaikh"));
 }
}

 //functional interface having only one abstract method
 interface Functional{
 	String say(String s);
 }


Example 4(Lambda with Single Parameter - II):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {

	//note that the parameter name (s2) should be different than argument name (s) in lambda
	//we cannot redeclare the same variable already defined in the enclosing scope
	//also multiple line statements should always be enclosed in curly braces despite of their return type
	
	String s = "Owl";
	
	Bird b = s2 -> {
		out.println(s2);
		out.println(s2+" Parrot");
	};
	
	b.name(s);
 }
}


 //functional interface having only one abstract method
 interface Bird{
	void name(String s);
 }


Example 5(Lambda with Multiple Parameters - I):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	//we can omit the outer curly braces if it is a single line (expression) or
	//if the return type is void
	Power p = (a,b) -> Math.pow(a,b);
	out.println(p.calculate(2,4));	
 }
}

 //functional interface having only one abstract method
 interface Power{
	double calculate(int a, int b);
 }


Example 5(Lambda with Multiple Parameters - II):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
 
	//each instance has its own method declaration
	//if a single statement/expression evaluates up to a value its value is returned and no need to write 'return' keyword explicitly
	int x=5,y=4;
	
	Calculator c1 = (a,b) -> a+b;
	out.println(c1.operation(x,y));
	
	Calculator c2 = (a,b) -> a-b;
	out.println(c2.operation(x,y));
 }
}
 
 //functional interface having only one abstract method
 interface Calculator{
	int operation(int a, int b);
 }


Example 6:

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	//the below program will give a compilation error that local variables referenced from a lambda expression
	//must be final or effectively final (only initialization - single copy)
	//although this is not true for an array/arraylist i.e you can modify it anywhere
	
	int c = 3;
	++c;
	
	int b[] = {1,2,3};
	++b[0];
	
	List<Integer> ls = new ArrayList<>();
	ls.add(1);
	ls.add(2);
	ls.add(3);
	
	Access a = () -> {
		out.println(c);
		++b[0];
		out.println(Arrays.toString(b));
		ls.add(4);
		out.println(new Test().getClass().getSimpleName());
		out.println(ls.get(3));
		out.println("Hi");
		ls.add(5);
	};
	
	a.access();
 }
}

 interface Access{
	 void access();
 }
 

Example 7(GUI - JavaFX):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	//The method invocation btn.setOnAction specifies what happens when you select the button represented by the btn object. 
	//This method requires an object of type EventHandler<ActionEvent>. 
	//The EventHandler<ActionEvent> interface contains only one method, void handle(T event). 
	
	/*
		@Override
		public void handle(ActionEvent event) {
			System.out.println("Hello World!");
		}
	*/
	
	/*
		//event - parameter name of type ActionEvent
		btn.setOnAction(event -> System.out.println("Hello World!"));
    */
 }
}


Example 8(ArrayList - I):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	ArrayList<Integer> ls = new ArrayList<>();
	ls.add(5);
	ls.add(6);
	ls.add(7);
	
	//'for each' iterates the list of objects of type Consumer which is a functional interface having
	//one abstract method 'accept' which is void method with one parameter and does nothing  
	//here the 'accept' method gets overriden via lambda expressions
	ls.forEach(val -> out.println(val));
	
	//the below lines of code won't work since consumer interface is expected to operate via side-effects
	//it just consumes something and doesn't return anything unlike other functional interfaces
	//Consumer is a type of function (forEach) object (val of type Consumer) created by the compiler via lambda expression
	
	/*ls.forEach(new Consumer<Integer>(){
		
		@Override
		public void accept(Integer i){
			out.println(i);
		}
	});*/
	
 }
}


Example 9(ArrayList - II):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	ArrayList<Temp> tls = new ArrayList<>();
	tls.add(new Temp(1,0));
	tls.add(new Temp(2,1));
	tls.add(new Temp(3,2));
	
	tls.forEach((x) -> out.println(x.getVal() + " " + x.getIndex()));
 }
} 

class Temp{
	
	private int val, index;
	
	public Temp(int val, int index){
		this.val = val;
		this.index = index;
	}
	
	public int getVal(){
		return this.val;
	}
	
	public int getIndex(){
		return this.index;
	}
 }
 
 
Example 10(Priority Queue):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	
	int tt = in.nextInt();
	
	while(tt-->0){
		
		 int n = in.nextInt();
		 int i,val1,val2,m,i1,i2;
		 long res=0;
		 
		 //shortcut for comparator using lambda and comparable interaface
		 //increasing order --> m1<->m2
		 //decreasing order --> m2<->m1
		 PriorityQueue<Map> pq = new PriorityQueue<>((m1, m2) -> Integer.valueOf(m2.getVal()).compareTo(Integer.valueOf(m1.getVal())));
		
		 for(i=0;i<n;++i){
			pq.offer(new Map(in.nextInt(),i));
		 }	
	}
 }
}

class Map{
	private int val,index;
	
	public Map(int val, int index){
		this.val = val;
		this.index = index;
	}
	
	public int getVal(){
		return this.val;
	}
	
	public int getIndex(){
		return this.index;
	}
 } 
 
  
Example 11(ArrayList - Custom Sorting):

CODE:
public class Test{
 public static void main(String ... args) throws IOException {
	Temp t[] = new Temp[3];

	int i;

	for(i=0;i<3;++i)
	t[i] = new Temp(in.nextInt(),in.nextInt()); 

	//comparator is a functional interface having only one abstract method i.e compare()
	//implicit declaration of the comparator object
	//here we are using compareTo method of Comparable interface instead of implementing it explicitly (see below) 
	Arrays.sort(t, (t1, t2) -> Integer.valueOf(t1.getVal()).compareTo(Integer.valueOf(t2.getVal())));
	
	/*
	Without using compareTo method of the Comparable interface
		
	if(t1.getVal()>t2.getVal())
		return 1;
	else if(t1.getVal()<t2.getVal())
		return -1;
	return 0;
	*/
			
	for(i=0;i<3;++i)
	out.println(t[i].getVal()+" "+t[i].getIndex()); 	
 }		
}

class Temp{
	
	private int val, index;
	
	public Temp(int val, int index){
		this.val = val;
		this.index = index;
	}
	
	public int getVal(){
		return this.val;
	}
	
	public int getIndex(){
		return this.index;
	}
 }





