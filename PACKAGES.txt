PACKAGES (similar/related bundle-up):

To make types easier to find and use, to avoid naming conflicts, and to control access, programmers bundle groups of related types into packages.

Definition: A package is a grouping of related types providing access protection and name space management. Note that types refers to classes, interfaces, enumerations, and annotation types.

The types that are part of the Java platform are members of various packages that bundle classes by function: fundamental classes are in java.lang, classes for reading and writing (input and output) are in java.io, and so on. 

Example:

Suppose you write a group of classes that represent graphic objects, such as circles, rectangles, lines, and points. You also write an interface, Draggable, that classes implement if they can be dragged with the mouse.

//in the Draggable.java file
public interface Draggable {
    ...
}

//in the Graphic.java file
public abstract class Graphic {
    ...
}

//in the Circle.java file
public class Circle extends Graphic
    implements Draggable {
    . . .
}

//in the Rectangle.java file
public class Rectangle extends Graphic
    implements Draggable {
    . . .
}

//in the Point.java file
public class Point extends Graphic
    implements Draggable {
    . . .
}

//in the Line.java file
public class Line extends Graphic
    implements Draggable {
    . . .
}


You should bundle these classes and the interface in a package for several reasons, including the following:

1. You and other programmers can easily determine that these types are related.
2. You and other programmers know where to find types that can provide graphics-related functions.
3. The names of your types won't conflict with the type names in other packages because the package creates a new 		   namespace.
4. You can allow types within the package to have unrestricted access to one another yet still restrict access for types  outside the package.


CREATING A PACKAGE:

To create a package, you choose a name for the package (naming conventions are discussed in the next section) and put a package statement with that name at the top of every source file that contains the types (classes, interfaces, enumerations, and annotation types) that you want to include in the package.

The package statement (for example, package graphics;) must be the first line in the source file. There can be only one package statement in each source file, and it applies to all types in the file.

Example (look at my current projects being developed in the eclipse IDE for example):

If you put the graphics interface and classes listed in the preceding section in a package called graphics, you would need six source files, like this:

//in the Draggable.java file
package graphics;
public interface Draggable {
    . . .
}

//in the Graphic.java file
package graphics;
public abstract class Graphic {
    . . .
}

//in the Circle.java file
package graphics;
public class Circle extends Graphic
    implements Draggable {
    . . .
}

//in the Rectangle.java file
package graphics;
public class Rectangle extends Graphic
    implements Draggable {
    . . .
}

//in the Point.java file
package graphics;
public class Point extends Graphic
    implements Draggable {
    . . .
}

//in the Line.java file
package graphics;
public class Line extends Graphic
    implements Draggable {
    . . .
}

NAMING A PACKAGE:

With programmers worldwide writing classes and interfaces using the Java programming language, it is likely that many programmers will use the same name for different types. In fact, the previous example does just that: It defines a Rectangle class when there is already a Rectangle class in the java.awt package. Still, the compiler allows both classes to have the same name if they are in different packages. The fully qualified name of each Rectangle class includes the package name. That is, the fully qualified name of the Rectangle class in the graphics package is graphics.Rectangle, and the fully qualified name of the Rectangle class in the java.awt package is java.awt.Rectangle.

A fully qualified name of the class is (lowercase)packagename.(pascal)ClassName, since there will be different packages for two classes having the same name, in this way java differentiates between two classes having the same name.

Naming Conventions (for example see my package explorer of the eclipse IDE):

Package names are written in all lower case to avoid conflict with the names of classes or interfaces.

Companies use their reversed Internet domain name to begin their package namesâ€”for example, com.example.mypackage for a package named mypackage created by a programmer at example.com.

Packages in the Java language itself begin with java. or javax.

USING PACKAGE MEMBERS:

Demo.java:-
CODE:
//above class belongs to this package
package test;

//importing just the class or everything from the package
import com.hammad.javafx.*;
//or import com.hammad.javafx.Main is the same;

public class Demo {
	public static void main(String... args) {
		
		//using "value" field (member variable) of the Main class by importing the class from its respective package 
		Main m = new Main();
		System.out.println(m.value);
	}
}

Main.java:-
CODE:
//above class belongs to this package
package com.hammad.javafx;

public class Main {
	public int value = 5;
}

Apparent hierarchies of packages:

At first, packages appear to be hierarchical, but they are not. For example, the Java API includes a java.awt package, a java.awt.color package, a java.awt.font package, and many others that begin with java.awt. However, the java.awt.color package, the java.awt.font package, and other java.awt.xxxx packages are not included in the java.awt package. The prefix java.awt (the Java Abstract Window Toolkit) is used for a number of related packages to make the relationship evident, but not to show inclusion.

Importing java.awt.* imports all of the types in the java.awt package, but it does not import java.awt.color, java.awt.font, or any other java.awt.xxxx packages. If you plan to use the classes and other types in java.awt.color as well as those in java.awt, you must import both packages with all their files:

import java.awt.*;
import java.awt.color.*;

Name ambiguities:

If a member in one package shares its name with a member in another package and both packages are imported, you must refer to each member by its qualified name. For example, the graphics package defined a class named Rectangle. The java.awt package also contains a Rectangle class. If both graphics and java.awt have been imported, the following is ambiguous.

Rectangle rect;

In such a situation, you have to use the member's fully qualified name to indicate exactly which Rectangle class you want. For example,

graphics.Rectangle rect;

Static import statement:

There are situations where you need frequent access to static final fields (constants) and static methods from one or two classes. Prefixing the name of these classes over and over can result in cluttered code. The static import statement gives you a way to import the constants and static methods that you want to use so that you do not need to prefix the name of their class.

Example:
CODE:
public class Basic {
	public static void main(String... args) {
		//to use something from the Math class we have to mention the class name again and again before using
		//certain fields and methods (static)
		//to solve this refer below
		System.out.println(Math.PI);
		System.out.println(Math.cos(90));
	}	
}

The java.lang.Math class defines the PI constant and many static methods, including methods for calculating sines, cosines, tangents, square roots, maxima, minima, exponents, and many more.

You can use the static import statement to import the static members of java.lang.Math so that you don't need to prefix the class name, Math. The static members of Math can be imported either individually:

import static java.lang.Math.PI;

or as a group:
import static java.lang.Math.*;

Example:
CODE:

//by using the static keyword before the package name we can import all the static fields and methods (i.e members) //present in that particular class
import static java.lang.Math.*;
public class Basic {
	public static void main(String... args) {
		System.out.println(PI);
		System.out.println(cos(90));
	}	
}

Obviously, you can write your own classes that contain constants and static methods that you use frequently, and then use the static import statement. For example,

mypackage --> package
MyConstants --> class

import static mypackage.MyConstants.*;

Use static import very sparingly. Overusing static import can result in code that is difficult to read and maintain, because readers of the code won't know which class defines a particular static object. Used properly, static import makes code more readable by removing class name repetition.












